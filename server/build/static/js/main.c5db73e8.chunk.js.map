{"version":3,"sources":["logo.svg","colors.js","Components/Nav.js","Components/Main.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colors","Nav","props","toggleDrawer","newState","setState","navOpen","state","handleClose","Button","onClick","this","Drawer","anchor","open","onClose","List","ListItem","button","key","ListItemIcon","ListItemText","primary","Divider","React","Component","Main","style","styles","base","wrapper","TextField","id","label","multiline","variant","journal","rows","flex","margin","width","backgroundColor","myTheme","createMuiTheme","palette","main","secondary","App","className","ThemeProvider","theme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,6JCE9BC,EACG,UADHA,EAED,U,mICWCC,EAAb,kDAEE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,SAAU,EAAKC,MAAMD,WARnB,EAWnBE,YAAc,aATZ,EAAKD,MAAQ,CACXD,SAAS,GAHM,EAFrB,qDAkBG,OACG,6BACE,kBAACG,EAAA,EAAD,CAAQC,QAASC,KAAKR,cAAc,kBAAC,IAAD,OACpC,kBAACS,EAAA,EAAD,CAAQC,OAAO,OAAOC,KAAMH,KAAKJ,MAAMD,QAASS,QAASJ,KAAKR,cAC9D,kBAACa,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAI,WACnB,kBAACC,EAAA,EAAD,SAAe,kBAAC,IAAD,MAAf,KACA,kBAACC,EAAA,EAAD,CAAcC,QAAQ,aAExB,kBAACL,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAI,WACnB,kBAACC,EAAA,EAAD,SAAe,kBAAC,IAAD,MAAf,KACA,kBAACC,EAAA,EAAD,CAAcC,QAAQ,sBAG5B,kBAACC,EAAA,EAAD,MACA,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAI,YACnB,kBAACC,EAAA,EAAD,SAAe,kBAAC,IAAD,MAAf,KACA,kBAACC,EAAA,EAAD,CAAcC,QAAQ,0BApCpC,GAAyBE,IAAMC,WCVlBC,EAAb,kDAEE,WAAYxB,GAAQ,uCACZA,GAHV,qDAQG,OACC,yBAAKyB,MAAOC,EAAOC,MACjB,kBAAC,EAAD,MACA,yBAAKF,MAAOC,EAAOE,SACjB,kBAACC,EAAA,EAAD,CACEC,GAAG,cACHC,MAAM,6BACNC,WAAS,EACTC,QAAQ,WACRR,MAAQC,EAAOQ,QACfC,KAAM,WAlBhB,GAA0Bb,IAAMC,WA0B1BG,EAAS,CACbC,KAAM,CACJS,KAAK,GAEPR,QAAS,CACPQ,KAAK,EACLC,OAAQ,KAEVH,QAAS,CACPI,MAAO,OACPC,gBAAiB,6B,QCtCRC,EAAUC,YAAe,CACpCC,QAAS,CACPtB,QAAS,CACPuB,KAAM7C,GAER8C,UAAW,CACTD,KAAM7C,M,SCMG+C,MARf,WACE,OAAQ,yBAAKC,UAAU,OACrB,kBAACC,EAAA,EAAD,CAAeC,MAAOR,GAClB,kBAAC,EAAD,SCEYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5db73e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\n\r\nexport const colors = {\r\n  mediumPurple: \"#735D78\",\r\n  lightPink:\"#F7D1CD\",\r\n  mediumPink: \"#E8C2CA\"\r\n};","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {colors} from \"../colors\"\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\n\r\nexport class Nav extends React.Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      navOpen: false\r\n    }\r\n  }\r\n\r\n  toggleDrawer = (newState) => {\r\n    this.setState({navOpen: !this.state.navOpen})\r\n  }\r\n\r\n  handleClose = () => {\r\n\r\n  }\r\n\r\n  render() {\r\n   return (\r\n      <div>\r\n        <Button onClick={this.toggleDrawer}><MenuIcon/></Button>\r\n        <Drawer anchor=\"left\" open={this.state.navOpen} onClose={this.toggleDrawer}>\r\n        <List>\r\n            <ListItem button key=\"Journal\">\r\n              <ListItemIcon> <MenuBookIcon /> </ListItemIcon>\r\n              <ListItemText primary=\"Journal\" />\r\n            </ListItem>\r\n            <ListItem button key=\"Support\">\r\n              <ListItemIcon> <PeopleIcon /> </ListItemIcon>\r\n              <ListItemText primary=\"Support Network\" />\r\n            </ListItem>\r\n        </List>\r\n        <Divider/>\r\n        <List>\r\n            <ListItem button key=\"Analysis\">\r\n              <ListItemIcon> <AssignmentIcon /> </ListItemIcon>\r\n              <ListItemText primary=\"Text Analysis\" />\r\n            </ListItem>\r\n        </List>\r\n        </Drawer>\r\n      </div>)\r\n    }\r\n\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {colors} from \"../colors\"\r\nimport {Nav} from \"./Nav\"\r\nexport class Main extends React.Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n\r\n  render() {\r\n   return (\r\n    <div style={styles.base}>\r\n      <Nav/>\r\n      <div style={styles.wrapper}>\r\n        <TextField\r\n          id=\"journalText\"\r\n          label=\"How are you feeling today?\"\r\n          multiline\r\n          variant=\"outlined\"\r\n          style= {styles.journal}\r\n          rows={25}\r\n        />\r\n      </div>\r\n    </div>)\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n  base: {\r\n    flex:1\r\n  },\r\n  wrapper: {\r\n    flex:1,\r\n    margin: 100,\r\n  },\r\n  journal: {\r\n    width: \"100%\",\r\n    backgroundColor: \"rgba(247, 209, 205, 0.3)\"\r\n  }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport {colors} from './colors';\r\n\r\nexport const myTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: colors.mediumPurple,\r\n    },\r\n    secondary: {\r\n      main: colors.lightPink,\r\n    },\r\n  },\r\n});","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Main} from \"./Components/Main\";\nimport {myTheme} from \"./theme\"\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nfunction App() {\n  return (<div className=\"App\">\n    <ThemeProvider theme={myTheme}>\n        <Main/>\n    </ThemeProvider>\n    </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}