{"version":3,"sources":["logo.svg","colors.js","Components/Nav/NavListItem.js","Components/Nav/Nav.js","Requests/journalRequests.js","Components/Journal.js","Components/Support/Supporter.js","Components/Support/Support.js","Components/Main.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colors","NavListItem","props","onNavClick","id","ListItem","button","onClick","this","ListItemIcon","icon","ListItemText","primary","React","Component","Nav","toggleDrawer","newState","setState","navOpen","state","handleClose","changeNavPage","style","styles","navWrapper","Button","fontSize","Drawer","anchor","open","onClose","List","Divider","text","display","justifyContent","apiURL","journalEntry","a","fetch","method","mode","headers","Accept","body","JSON","stringify","response","json","responseJson","ok","message","Error","Journal","textFieldChange","event","target","value","fetchJournalScore","getSentimentLabel","then","label","error","wrapper","TextField","multiline","variant","journal","rows","onChange","buttonStyle","color","flex","margin","width","backgroundColor","Supporter","initial","pending","name","charAt","avatarStyle","index","Card","card","CardContent","cardContent","cardElement","Avatar","phonenumber","marginTop","marginLeft","marginRight","flexDirection","Support","supporters","supportlevel","map","supporter","i","key","Main","selectedPage","navPage","userId","base","myTheme","createMuiTheme","palette","main","secondary","App","className","ThemeProvider","theme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.932c7c20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","\r\n\r\nexport const colors = {\r\n  mediumPurple: \"#735D78\",\r\n  lightPink:\"#F7D1CD\",\r\n  mediumPink: \"#E8C2CA\",\r\n  lightPurple: \"#D1B3C4\"\r\n\r\n};","import React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nexport class NavListItem extends React.Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  onNavClick = () => {\r\n    this.props.onNavClick(this.props.id)\r\n  }\r\n\r\n  render() {\r\n   return (<ListItem button onClick={this.onNavClick}>\r\n              <ListItemIcon> {this.props.icon} </ListItemIcon>\r\n              <ListItemText primary={this.props.id} />\r\n            </ListItem>\r\n          )\r\n    }\r\n\r\n}\r\n","import React from 'react'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport {NavListItem} from \"./NavListItem\"\r\n\r\nexport class Nav extends React.Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      navOpen: false\r\n    }\r\n  }\r\n\r\n  toggleDrawer = (newState) => {\r\n    this.setState({navOpen: !this.state.navOpen})\r\n  }\r\n\r\n  handleClose = () => {\r\n  }\r\n\r\n  onNavClick = (id) => {\r\n    this.props.changeNavPage(id)\r\n    this.setState({navOpen: false})\r\n  }\r\n\r\n  render() {\r\n   return (\r\n      <div style={styles.navWrapper}>\r\n        <Button onClick={this.toggleDrawer}><MenuIcon fontSize=\"large\"/></Button>\r\n        <Drawer anchor=\"left\" open={this.state.navOpen} onClose={this.toggleDrawer}>\r\n        <List>\r\n          <NavListItem id=\"Journal\"  onNavClick={this.onNavClick} icon={<MenuBookIcon />}/>\r\n          <NavListItem id=\"Support Network\" onNavClick={this.onNavClick} icon={<PeopleIcon />}/>\r\n        </List>\r\n        <Divider/>\r\n        <List>\r\n          <NavListItem id=\"Analysis\" text=\"Text Analysis\" onNavClick={this.onNavClick} icon={<AssignmentIcon />}/>\r\n        </List>\r\n        </Drawer>\r\n      </div>)\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n  navWrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\"\r\n  },\r\n}\r\n","const apiURL = \"https://mental-health-node-app.herokuapp.com\"\r\n//const apiURL = \"https://localhost:3030\"\r\nexport async function getSentimentLabel(journalEntry) {\r\n  try {\r\n    let response: any = await fetch(apiURL + \"/journal/getSentimentLabel\", {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      \"journalEntry\": journalEntry,\r\n    }),\r\n  });\r\n    let responseJson = await response.json();\r\n    if(response.ok) {\r\n      return responseJson;\r\n    } else if (!responseJson.message) {\r\n      throw new Error(\"Something went wrong\")\r\n    } else {\r\n      throw new Error(responseJson.message)\r\n    }\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}","import React from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {getSentimentLabel} from \"../Requests/journalRequests\"\r\nimport {colors} from \"../colors\"\r\nexport class Journal extends React.Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      journalEntry: \"\",\r\n      label: 0\r\n    }\r\n  }\r\n\r\n  textFieldChange = (event) => {\r\n    this.setState({journalEntry: event.target.value})\r\n    this.fetchJournalScore()\r\n\r\n  }\r\n\r\n  fetchJournalScore = () => {\r\n     getSentimentLabel(this.state.journalEntry).then(\r\n      (value) => { \r\n        this.setState({label: value.label})\r\n      },\r\n      (error) => {\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n   return (\r\n      <div style={styles.wrapper}>\r\n        {this.state.label}\r\n        <TextField\r\n          id=\"journalText\"\r\n          label=\"How are you feeling today?\"\r\n          multiline\r\n          value={this.state.journalEntry}\r\n          variant=\"outlined\"\r\n          style= {styles.journal}\r\n          rows={25}\r\n          onChange={this.textFieldChange}\r\n        />\r\n        <Button style={styles.buttonStyle} variant=\"contained\" color=\"primary\">\r\n          Submit\r\n        </Button>\r\n      </div>)\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    flex:1,\r\n    margin: 100,\r\n  },\r\n  journal: {\r\n    width: \"100%\",\r\n    backgroundColor: \"rgba(247, 209, 205, 0.3)\"\r\n  },\r\n  buttonStyle: {\r\n    margin: 20\r\n  }\r\n}\r\n","import React from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {colors} from \"../../colors\"\r\nexport class Supporter extends React.Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n\r\n  render() {\r\n    const initial = this.props.pending? \"!\" : this.props.name.charAt(0)\r\n    const color = (this.props.index % 2 == 0) ? colors.mediumPurple : colors.lightPurple\r\n    const avatarStyle= {\r\n      backgroundColor: color,\r\n    } \r\n   return (\r\n      <Card style={styles.card}>\r\n        <CardContent style={styles.cardContent}>\r\n          <div style={styles.cardElement}>\r\n          <Avatar style={avatarStyle} >{initial}</Avatar>\r\n          </div>\r\n          <div style={styles.cardElement}>{this.props.name}</div>\r\n          <div style={styles.cardElement}>{this.props.phonenumber}</div>\r\n        </CardContent>\r\n    </Card>)\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n  card: {\r\n    flex:1,\r\n    marginTop: 20,\r\n    marginLeft: 100,\r\n    marginRight: 100,\r\n    backgroundColor: \"rgba(237, 219, 217, 0.6)\"\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"row\"\r\n  },\r\n  cardElement: {\r\n    display: \"flex\",\r\n    flex: 1\r\n  }\r\n}\r\n","import React from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Supporter} from \"./Supporter\"\r\nexport class Support extends React.Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n\r\n  render() {\r\n    const supportersList = [{id: 12, name: \"Jesse Elm\", phonenumber: \"1234567890\", supportlevel: 3}, {id: 4, name: \"Mom\", phonenumber: \"1234567890\", supportlevel: 1}, {id: 5, name: \"Casey\", phonenumber: \"1234567890\", supportlevel: 1}]\r\n\r\n    let supporters = (supportersList).map((supporter, i) =>\r\n    <Supporter  name={supporter.name} index={i} key={i} id={supporter.id} phonenumber={supporter.phonenumber}/>\r\n    );\r\n   return (\r\n      <div style={styles.wrapper}>\r\n        <div>\r\n        </div>\r\n        <div>\r\n          {supporters}\r\n        </div>\r\n      </div>)\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    flex:1,\r\n    margin: 100,\r\n  },\r\n}\r\n","import React from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {colors} from \"../colors\"\r\nimport {Nav} from \"./Nav/Nav\"\r\nimport {Journal} from \"./Journal\"\r\nimport {Support} from \"./Support/Support\"\r\nexport class Main extends React.Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      navPage: \"Journal\",\r\n      userId: 1\r\n    }\r\n  }\r\n\r\n  changeNavPage = (selectedPage) => {\r\n    this.setState({navPage: selectedPage})\r\n  }\r\n\r\n\r\n  render() {\r\n   return (\r\n    <div style={styles.base}>\r\n      <Nav changeNavPage={this.changeNavPage}/>\r\n      <h2>{this.state.navPage}</h2>\r\n        {this.state.navPage == \"Journal\" && <Journal userId={this.state.userId}/>}\r\n        {this.state.navPage == \"Support Network\" && <Support userId={this.state.userId}/>}\r\n    </div>)\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n  base: {\r\n    flex:1\r\n  },\r\n  wrapper: {\r\n    flex:1,\r\n    margin: \"80 100\",\r\n  },\r\n  journal: {\r\n    width: \"100%\",\r\n    backgroundColor: \"rgba(247, 209, 205, 0.3)\"\r\n  }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport {colors} from './colors';\r\n\r\nexport const myTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: colors.mediumPurple,\r\n    },\r\n    secondary: {\r\n      main: colors.lightPink,\r\n    },\r\n  },\r\n});","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Main} from \"./Components/Main\";\r\nimport {myTheme} from \"./theme\"\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\n\r\nfunction App() {\r\n  return (<div className=\"App\">\r\n    <ThemeProvider theme={myTheme}>\r\n        <Main/>\r\n    </ThemeProvider>\r\n    </div>);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}